/******* THIS FILE WAS AUTO-GENERATED BY SCANOSS MINR *******/
#ifndef _CRYPTO_LOADS_
#define _CRYPTO_LOADS_
#include "trie.h"
extern struct T_TrieNode * root;
void load_default_crypto(void){
	insert("Rabin.genKey",root,"Rabin",128);
	insert("Rabin.encrypt",root,"Rabin",128);
	insert("Rabin.decrypt",root,"Rabin",128);
	insert("EnigmaMachine",root,"Enigma",48);
	insert("blake3.h",root,"BlakeX",512);
	insert("blake3_hasher_update",root,"BlakeX",512);
	insert("blake3_impl.h",root,"BlakeX",512);
	insert("BLAKE2b512",root,"BlakeX",512);
	insert("BLAKE2b256",root,"BlakeX",512);
	insert("CRC_16",root,"CRC16",16);
	insert("CRC_16CCITT",root,"CRC16",16);
	insert("CRC_16XModem",root,"CRC16",16);
	insert("CRC16",root,"CRC16",16);
	insert("SHA-1",root,"SHA1",128);
	insert("getDhObjectFromEvent",root,"DiffieHellman",128);
	insert("RSA_DH.cpp",root,"DiffieHellman",128);
	insert("dh_cmp_parameters",root,"DiffieHellman",128);
	insert("dh_pkey_import_from",root,"DiffieHellman",128);
	insert("DH_get_ex_data",root,"DiffieHellman",128);
	insert("DH_meth_set_flags",root,"DiffieHellman",128);
	insert("dh_pkey_import_from_type",root,"DiffieHellman",128);
	insert("DH_check_params_ex",root,"DiffieHellman",128);
	insert("dh_gen_named_group",root,"DiffieHellman",128);
	insert("dh_param_init",root,"DiffieHellman",128);
	insert("DH_set_ex_data",root,"DiffieHellman",128);
	insert("ossl_dh_new_by_nid_ex",root,"DiffieHellman",128);
	insert("ossl_dh_get0_params",root,"DiffieHellman",128);
	insert("DH_test_flags",root,"DiffieHellman",128);
	insert("DH_meth_free",root,"DiffieHellman",128);
	insert("DH_meth_set_generate_params",root,"DiffieHellman",128);
	insert("DH_set0_key",root,"DiffieHellman",128);
	insert("DH_security_bits",root,"DiffieHellman",128);
	insert("ossl_dh_check_pairwise",root,"DiffieHellman",128);
	insert("DH_set_default_method",root,"DiffieHellman",128);
	insert("DH_meth_set_bn_mod_exp",root,"DiffieHellman",128);
	insert("DH_get0_engine",root,"DiffieHellman",128);
	insert("DH_meth_get0_app_data",root,"DiffieHellman",128);
	insert("DH_meth_set_compute_key",root,"DiffieHellman",128);
	insert("DH_get0_pqg",root,"DiffieHellman",128);
	insert("dh_public_print",root,"DiffieHellman",128);
	insert("cast5.h",root,"CAST5",320);
	insert("3way.h",root,"3Way",128);
	insert("CRYPTOPP_THREEWAY_H",root,"3Way",128);
	insert("KHAZAD_ROUNDS",root,"Khazad",16);
	insert("khazad_setkey",root,"Khazad",16);
	insert("khazad_crypt",root,"Khazad",16);
	insert("khazad_encrypt",root,"Khazad",16);
	insert("khazad_decrypt",root,"Khazad",16);
	insert("khazad_mod_fini",root,"Khazad",16);
	insert("khazad-min.h",root,"Khazad",16);
	insert("KHAZAD_H",root,"Khazad",16);
	insert("KHAZAD_BLOCK_SIZE",root,"Khazad",16);
	insert("KHAZAD_NUM_ROUNDS",root,"Khazad",16);
	insert("KHAZAD_KEY_SIZE",root,"Khazad",16);
	insert("KHAZAD_KEY_SCHEDULE_SIZE",root,"Khazad",16);
	insert("panama.h",root,"Panama",128);
	insert("panama_LTX__mcrypt_set_key",root,"Panama",128);
	insert("panama_LTX__mcrypt_encrypt",root,"Panama",128);
	insert("panama_LTX__mcrypt_decrypt",root,"Panama",128);
	insert("panama_LTX__mcrypt_get_size",root,"Panama",128);
	insert("panama_LTX__mcrypt_get_block_size",root,"Panama",128);
	insert("panama_LTX__is_block_algorithm",root,"Panama",128);
	insert("Snefru",root,"SNERFU",256);
	insert("seed128Cipher",root,"Seed",256);
	insert("seed.go",root,"Seed",256);
	insert("ECDHE-RSA-AES256-GCM-SHA384",root,"DHE",128);
	insert("ECDHE-RSA-AES256-SHA384",root,"DHE",128);
	insert("ECDHE-RSA-AES256-SHA",root,"DHE",128);
	insert("DHE-RSA-AES256-GCM-SHA384",root,"DHE",128);
	insert("DHE-RSA-AES256-SHA256",root,"DHE",128);
	insert("DHE-RSA-AES256-SHA",root,"DHE",128);
	insert("DHE-RSA-CAMELLIA256-SHA",root,"DHE",128);
	insert("ECDHE-RSA-AES128-GCM-SHA256",root,"DHE",128);
	insert("ECDHE-RSA-AES128-SHA256",root,"DHE",128);
	insert("ECDHE-RSA-AES128-SHA",root,"DHE",128);
	insert("DHE-RSA-AES128-GCM-SHA256",root,"DHE",128);
	insert("DHE-RSA-AES128-SHA256",root,"DHE",128);
	insert("DHE-RSA-AES128-SHA",root,"DHE",128);
	insert("DHE-RSA-CAMELLIA128-SHA",root,"DHE",128);
	insert("FEAL_key_schedule",root,"Feal",64);
	insert("FEAL_Encrypt",root,"Feal",64);
	insert("FEAL_Decrypt",root,"Feal",64);
	insert("feal8.h",root,"Feal",64);
	insert("whirlpool.New",root,"Whirpool",128);
	insert("whirpool.go",root,"Whirpool",128);
	insert("rhash_whirlpool_init",root,"Whirpool",128);
	insert("rhash_whirlpool_sbox",root,"Whirpool",128);
	insert("rhash_whirlpool_process_block",root,"Whirpool",128);
	insert("WHIRLPOOL_OP",root,"Whirpool",128);
	insert("WHIRLPOOL_Update",root,"Whirpool",128);
	insert("WHIRLPOOL_BitUpdate",root,"Whirpool",128);
	insert("WHIRLPOOL_Final",root,"Whirpool",128);
	insert("whirlpool_block_mmx",root,"Whirpool",128);
	insert("whirlpool_block",root,"Whirpool",128);
	insert("WHIRLPOOL_Init",root,"Whirpool",128);
	insert("haval.h",root,"Haval",128);
	insert("haval_context",root,"Haval",128);
	insert("Haval-160",root,"Haval",128);
	insert("Haval-192",root,"Haval",128);
	insert("Haval-224",root,"Haval",128);
	insert("Haval-256",root,"Haval",128);
	insert("Haval-128",root,"Haval",128);
	insert("DHIES",root,"DHIES",128);
	insert("node-ice",root,"ICE",128);
	insert("iceKey",root,"ICE",128);
	insert("__RUBY_ICE_KEY_H",root,"ICE",128);
	insert("ice_cipher_create_key",root,"ICE",128);
	insert("ice_cipher_deallocate",root,"ICE",128);
	insert("ice_cipher_allocate",root,"ICE",128);
	insert("ice_cipher_initialize",root,"ICE",128);
	insert("ice_cipher_set_key",root,"ICE",128);
	insert("ice_cipher_key_size",root,"ICE",128);
	insert("ice_cipher_block_size",root,"ICE",128);
	insert("ice_cipher_encrypt",root,"ICE",128);
	insert("ice_cipher_decrypt",root,"ICE",128);
	insert("IceSubkey",root,"ICE",128);
	insert("egKey",root,"ElGamal",128);
	insert("elgamal.py",root,"ElGamal",128);
	insert("elgamal.h",root,"ElGamal",128);
	insert("ElGamalEncryptor",root,"ElGamal",128);
	insert("ElGamalDecryptor",root,"ElGamal",128);
	insert("CRYPTOPP_ELGAMAL_H",root,"ElGamal",128);
	insert("IdeaMode_h",root,"Idea",64);
	insert("IdeaEncryptStreamStatus",root,"Idea",64);
	insert("IdeaStreamEncryptInit",root,"Idea",64);
	insert("IdeaStreamDecryptInit",root,"Idea",64);
	insert("IdeaStreamCTRRandomAccessInit",root,"Idea",64);
	insert("IdeaStreamEncryptDelete",root,"Idea",64);
	insert("IdeaStreamPCBCDecrypt",root,"Idea",64);
	insert("IdeaStreamCFBEncrypt",root,"Idea",64);
	insert("LL_GEA0",root,"GEA0-3",64);
	insert("LL_GEA1",root,"GEA0-3",64);
	insert("LL_GEA2",root,"GEA0-3",64);
	insert("LL_GEA3",root,"GEA0-3",64);
	insert("hf_nas_eps_emm_gea0",root,"GEA0-3",64);
	insert("hf_nas_eps_emm_gea1",root,"GEA0-3",64);
	insert("hf_nas_eps_emm_gea2",root,"GEA0-3",64);
	insert("hf_nas_eps_emm_gea3",root,"GEA0-3",64);
	insert("secret-handshake",root,"SHS",128);
	insert("shsInit",root,"SHS",128);
	insert("shs1",root,"SHS",128);
	insert("shsInit",root,"SHS",128);
	insert("SHS_CTX",root,"SHS",128);
	insert("shsUpdate",root,"SHS",128);
	insert("shs.h",root,"SHS",128);
	insert("SRPClient",root,"SRP",128);
	insert("SRPServer",root,"SRP",128);
	insert("libsrp",root,"SRP",128);
	insert("srp",root,"SRP",128);
	insert("_pysrp",root,"SRP",128);
	insert("_ctsrp",root,"SRP",128);
	insert("SRP_VBASE_get1_by_user",root,"SRP",128);
	insert("SRP_create_verifier_BN_ex",root,"SRP",128);
	insert("SRP_Calc_client_key",root,"SRP",128);
	insert("SRP_get_gN_by_id",root,"SRP",128);
	insert("SRP_VBASE_get_by_user",root,"SRP",128);
	insert("SRP_create_verifier_BN",root,"SRP",128);
	insert("SRP_Calc_x_ex",root,"SRP",128);
	insert("SRP_Verify_B_mod_N",root,"SRP",128);
	insert("SRP_user_pwd_set_gN",root,"SRP",128);
	insert("SRP_user_pwd_set1_ids",root,"SRP",128);
	insert("SRP_VBASE_add0_user",root,"SRP",128);
	insert("SRP_Calc_server_key",root,"SRP",128);
	insert("SRP_Calc_B_ex",root,"SRP",128);
	insert("SRP_get_default_gN",root,"SRP",128);
	insert("SRP_VBASE_new",root,"SRP",128);
	insert("SRP_user_pwd_set_sv",root,"SRP",128);
	insert("SRP_VBASE_free",root,"SRP",128);
	insert("SRP_gN_free",root,"SRP",128);
	insert("SRP_create_verifier_ex",root,"SRP",128);
	insert("SRP_gN_new_init",root,"SRP",128);
	insert("SRP_gN_place_bn",root,"SRP",128);
	insert("SRP_VBASE_init",root,"SRP",128);
	insert("SRP_Calc_u_ex",root,"SRP",128);
	insert("SRP_Calc_x",root,"SRP",128);
	insert("SRP_check_known_gN_param",root,"SRP",128);
	insert("srp_user_pwd_dup",root,"SRP",128);
	insert("SRP_Calc_B",root,"SRP",128);
	insert("SRP_Verify_A_mod_N",root,"SRP",128);
	insert("SRP_user_pwd_new",root,"SRP",128);
	insert("SRP_user_pwd_set0_sv",root,"SRP",128);
	insert("SRP_create_verifier",root,"SRP",128);
	insert("SRP_Calc_A",root,"SRP",128);
	insert("SRP_Calc_client_key_ex",root,"SRP",128);
	insert("SRP_user_pwd_free",root,"SRP",128);
	insert("CODING=96",root,"VMPC",128);
	insert("VMPCEngine.java",root,"VMPC",128);
	insert("VMPCrypt.py",root,"VMPC",128);
	insert("_VMPC_H_",root,"VMPC",128);
	insert("VmpcInitKeyRound",root,"VMPC",128);
	insert("VmpcInitKey",root,"VMPC",128);
	insert("VmpcInitKeyBASIC",root,"VMPC",128);
	insert("VmpcEncrypt",root,"VMPC",128);
	insert("VmpcEncryptMAC",root,"VMPC",128);
	insert("VmpcDecryptMAC",root,"VMPC",128);
	insert("VmpcOutputMAC",root,"VMPC",128);
	insert("AlgorithmRC6",root,"RC6",128);
	insert("RC6.encrypt",root,"RC6",128);
	insert("RC6.decript",root,"RC6",128);
	insert("RC6_HPP__",root,"RC6",128);
	insert("MD4.h",root,"MD4",128);
	insert("MD4_HMAC_BLOCK_SIZE",root,"MD4",128);
	insert("MD4_BLOCK_WORDS",root,"MD4",128);
	insert("MD4_HASH_WORDS",root,"MD4",128);
	insert("MD4_DIGEST_SIZE",root,"MD4",128);
	insert("md4_update",root,"MD4",128);
	insert("md4_init",root,"MD4",128);
	insert("md4_final",root,"MD4",128);
	insert("MD4_Init",root,"MD4",128);
	insert("md4_block_data_order",root,"MD4",128);
	insert("tcrypt.h",root,"TCRYPT",128);
	insert("_CRYPTO_TCRYPT_H",root,"TCRYPT",128);
	insert("3way.h",root,"3Way",128);
	insert("CRYPTOPP_THREEWAY_H",root,"3Way",128);
	insert("NoekeonIndirectRef",root,"Noekeon",128);
	insert("noekeon.h",root,"Noekeon",128);
	insert("NoekeonEngine",root,"Noekeon",128);
	insert("NoekeonEngine.cs",root,"Noekeon",128);
	insert("PKCS7_digest_from_attributes",root,"PKCS12",128);
	insert("PKCS7_set_content",root,"PKCS12",128);
	insert("ossl_x509_add_cert_new",root,"PKCS12",128);
	insert("PKCS7_add_attrib_smimecap",root,"PKCS12",128);
	insert("PKCS7_type_is_other",root,"PKCS12",128);
	insert("PKCS7_find_digest",root,"PKCS12",128);
	insert("pkcs7_ecdsa_or_dsa_sign_verify_setup",root,"PKCS12",128);
	insert("pkcs7_rsa_sign_verify_setup",root,"PKCS12",128);
	insert("PKCS7_RECIP_INFO_set",root,"PKCS12",128);
	insert("i2d_PKCS7_bio_stream",root,"PKCS12",128);
	insert("PKCS7_final",root,"PKCS12",128);
	insert("ASN1_INTEGER_cmp",root,"PKCS12",128);
	insert("PKCS7_dataDecode",root,"PKCS12",128);
	insert("PKCS7_encrypt_ex",root,"PKCS12",128);
	insert("ossl_err_load_PKCS7_strings",root,"PKCS12",128);
	insert("PKCS7_RECIP_INFO_get0_alg",root,"PKCS12",128);
	insert("PKCS7_sign_add_signer",root,"PKCS12",128);
	insert("PKCS7_verify",root,"PKCS12",128);
	insert("pkcs7_cmp_ri",root,"PKCS12",128);
	insert("PKCS7_SIGNER_INFO_sign",root,"PKCS12",128);
	insert("PKCS7_set_type",root,"PKCS12",128);
	insert("PKCS7_add_recipient",root,"PKCS12",128);
	insert("PKCS7_encrypt",root,"PKCS12",128);
	insert("PKCS7_dataInit",root,"PKCS12",128);
	insert("PKCS7_set_attributes",root,"PKCS12",128);
	insert("PKCS7_SIGNER_INFO_set",root,"PKCS12",128);
	insert("pkcs7_bio_add_digest",root,"PKCS12",128);
	insert("PKCS7_add_signed_attribute",root,"PKCS12",128);
	insert("PKCS7_add_crl",root,"PKCS12",128);
	insert("PKCS7_add_signer",root,"PKCS12",128);
	insert("PKCS7_add_signature",root,"PKCS12",128);
	insert("ossl_pkcs7_ctx_propagate",root,"PKCS12",128);
	insert("PKCS7_stream",root,"PKCS12",128);
	insert("PKCS7_decrypt",root,"PKCS12",128);
	insert("PKCS7_get_octet_string",root,"PKCS12",128);
	insert("PKCS7_get_attribute",root,"PKCS12",128);
	insert("PKCS7_content_new",root,"PKCS12",128);
	insert("ossl_pkcs7_set0_libctx",root,"PKCS12",128);
	insert("ossl_pkcs7_ctx_get0_libctx",root,"PKCS12",128);
	insert("PKCS7_SIGNER_INFO_get0_algs",root,"PKCS12",128);
	insert("PKCS7_sign",root,"PKCS12",128);
	insert("PKCS7_new",root,"PKCS12",128);
	insert("pkcs7_decrypt_rinfo",root,"PKCS12",128);
	insert("PKCS7_dataFinal",root,"PKCS12",128);
	insert("ossl_pkcs7_resolve_libctx",root,"PKCS12",128);
	insert("PEM_write_bio_PKCS7_stream",root,"PKCS12",128);
	insert("PKCS7_ctrl",root,"PKCS12",128);
	insert("PKCS7_add_certificate",root,"PKCS12",128);
	insert("SMIME_write_PKCS7",root,"PKCS12",128);
	insert("SMIME_write_ASN1_ex",root,"PKCS12",128);
	insert("PKCS7_add1_attrib_digest",root,"PKCS12",128);
	insert("PKCS7_get_issuer_and_serial",root,"PKCS12",128);
	insert("PKCS7_get_signed_attribute",root,"PKCS12",128);
	insert("PKCS7_sign_ex",root,"PKCS12",128);
	insert("PKCS12_get0_mac",root,"PKCS12",128);
	insert("PKCS12_pack_p7encdata",root,"PKCS12",128);
	insert("PKCS12_add_localkeyid",root,"PKCS12",128);
	insert("PKCS12_PBE_keyivgen_ex",root,"PKCS12",128);
	insert("PKCS12_PBE_keyivgen",root,"PKCS12",128);
	insert("PKCS12_item_i2d_encrypt",root,"PKCS12",128);
	insert("PKCS12_init",root,"PKCS12",128);
	insert("PKCS12_gen_mac",root,"PKCS12",128);
	insert("PKCS12_decrypt_skey",root,"PKCS12",128);
	insert("PKCS12_add_friendlyname_uni",root,"PKCS12",128);
	insert("PKCS12_add1_attr_by_NID",root,"PKCS12",128);
	insert("PKCS12_add_key_ex",root,"PKCS12",128);
	insert("PKCS12_key_gen_utf8_ex",root,"PKCS12",128);
	insert("PKCS12_get_attr",root,"PKCS12",128);
	insert("PKCS12_add_friendlyname_utf8",root,"PKCS12",128);
	insert("PKCS12_add_secret",root,"PKCS12",128);
	insert("PKCS8_get_attr",root,"PKCS12",128);
	insert("PKCS12_SAFEBAG_create0_pkcs8",root,"PKCS12",128);
	insert("PKCS12_add_cert",root,"PKCS12",128);
	insert("PKCS12_add_safe_ex",root,"PKCS12",128);
	insert("PKCS12_init_ex",root,"PKCS12",128);
	insert("parse_pk12",root,"PKCS12",128);
	insert("PKCS12_pack_authsafes",root,"PKCS12",128);
	insert("PKCS12_add_safes",root,"PKCS12",128);
	insert("PKCS12_item_i2d_encrypt_ex",root,"PKCS12",128);
	insert("PKCS12_verify_mac",root,"PKCS12",128);
	insert("PKCS12_SAFEBAG_get_nid",root,"PKCS12",128);
	insert("OPENSSL_asc2uni",root,"PKCS12",128);
	insert("PKCS12_SAFEBAG_create_pkcs8_encrypt",root,"PKCS12",128);
	insert("PKCS12_pack_p7encdata_ex",root,"PKCS12",128);
	insert("PKCS8_decrypt_ex",root,"PKCS12",128);
	insert("PKCS12_PBE_add",root,"PKCS12",128);
	insert("PKCS12_key_gen_asc_ex",root,"PKCS12",128);
	insert("pkcs12_gen_mac",root,"PKCS12",128);
	insert("PKCS8_decrypt",root,"PKCS12",128);
	insert("PKCS12_decrypt_skey_ex",root,"PKCS12",128);
	insert("CRYPTOPP_HC128_H",root,"HC128",128);
	insert("HC-128",root,"HC128",128);
	insert("HC128Info",root,"HC128",128);
	insert("Hc128Rng",root,"HC128",128);
	insert("DCC.py",root,"DCC",64);
	insert("KeccakHash.h",root,"Keccak",256);
	insert("Keccak_HashFinal",root,"Keccak",256);
	insert("KeccakSum",root,"Keccak",256);
	insert("aes.h",root,"AES",256);
	insert("tiny-AES-c",root,"AES",256);
	insert("_AES_HPP_",root,"AES",256);
	insert("aesInit",root,"AES",256);
	insert("AES_set_encrypt_key",root,"AES",256);
	insert("AES_set_decrypt_key",root,"AES",256);
	insert("AES_ige_encrypt",root,"AES",256);
	insert("AES_ofb128_encrypt",root,"AES",256);
	insert("AES_ecb_encrypt",root,"AES",256);
	insert("AES_cbc_encrypt",root,"AES",256);
	insert("AES_cfb8_encrypt",root,"AES",256);
	insert("AES_cfb128_encrypt",root,"AES",256);
	insert("AES_wrap_key",root,"AES",256);
	insert("AES_cfb1_encrypt",root,"AES",256);
	insert("AES_unwrap_key",root,"AES",256);
	insert("zipcloak",root,"ZipCrypt",64);
	insert("zipbare",root,"ZipCrypt",64);
	insert("PBEWithMD5AndDES",root,"PBES1",128);
	insert("getPBES1EncryptionObject",root,"PBES1",128);
	insert("getPBES1Hash",root,"PBES1",128);
	insert("getPBES1KDF",root,"PBES1",128);
	insert("PKCS5_SCHEME_PBES1",root,"PBES1",128);
	insert("multi2.h",root,"MULTI2",128);
	insert("LTC_MULTI2",root,"MULTI2",128);
	insert("multi2_desc",root,"MULTI2",128);
	insert("multi2_setup",root,"MULTI2",128);
	insert("multi2_ecb_encrypt",root,"MULTI2",128);
	insert("multi2_ecb_decrypt",root,"MULTI2",128);
	insert("QUAD.pack",root,"QUAD",128);
	insert("QUAD.unpack",root,"QUAD",128);
	insert("A5.c",root,"A5/1",128);
	insert("SHA-1",root,"SHAx",512);
	insert("SHA-224",root,"SHAx",512);
	insert("SHA-256",root,"SHAx",512);
	insert("SHA-384",root,"SHAx",512);
	insert("SHA-512",root,"SHAx",512);
	insert("SHA3-224",root,"SHAx",512);
	insert("SHA3-256",root,"SHAx",512);
	insert("SHA3-384",root,"SHAx",512);
	insert("SHA3-512",root,"SHAx",512);
	insert("jsSHA1",root,"SHAx",512);
	insert("jsSHA256",root,"SHAx",512);
	insert("jsSHA512",root,"SHAx",512);
	insert("jsSHA3",root,"SHAx",512);
	insert("sha.ts",root,"SHAx",512);
	insert("SHA512_Update",root,"SHAx",512);
	insert("SHA512_Init",root,"SHAx",512);
	insert("sha512_block_data_order",root,"SHAx",512);
	insert("SHA512_Transform",root,"SHAx",512);
	insert("sha512_block_p8",root,"SHAx",512);
	insert("SHA512_Final",root,"SHAx",512);
	insert("SHA256_Init",root,"SHAx",512);
	insert("SHA224_Update",root,"SHAx",512);
	insert("SHA224_Final",root,"SHAx",512);
	insert("sha512_256_init",root,"SHAx",512);
	insert("sha512_block_ppc",root,"SHAx",512);
	insert("grain128aead.h",root,"Grain",128);
	insert("Grain-128AEAD",root,"Grain",128);
	insert("grain_data",root,"Grain",128);
	insert("grain_state",root,"Grain",128);
	insert("Grain128Engine",root,"Grain",128);
	insert("sapphire.h",root,"Sapphire",256);
	insert("sapphire::keyrand",root,"Sapphire",256);
	insert("sapphire::initialize",root,"Sapphire",256);
	insert("sapphire::init_hash",root,"Sapphire",256);
	insert("ossl_dsa_generate_ffc_parameters",root,"DSA",128);
	insert("DSA_set_method",root,"DSA",128);
	insert("ossl_dsa_sign_int",root,"DSA",128);
	insert("DSA_set_ex_data",root,"DSA",128);
	insert("DSA_print",root,"DSA",128);
	insert("DSA_SIG_new",root,"DSA",128);
	insert("DSA_do_sign",root,"DSA",128);
	insert("dsa_finish",root,"DSA",128);
	insert("ossl_dsa_key_from_pkcs8",root,"DSA",128);
	insert("DSA_bits",root,"DSA",128);
	insert("dsa_pkey_ctrl",root,"DSA",128);
	insert("dsa_keygen_pairwise_test",root,"DSA",128);
	insert("pkey_dsa_keygen",root,"DSA",128);
	insert("pkey_dsa_copy",root,"DSA",128);
	insert("dsa_param_print",root,"DSA",128);
	insert("dsa_pub_print",root,"DSA",128);
	insert("DSA_meth_set_sign",root,"DSA",128);
	insert("DSA_meth_set_bn_mod_exp",root,"DSA",128);
	insert("DSA_meth_set_finish",root,"DSA",128);
	insert("ossl_dsa_key_fromdata",root,"DSA",128);
	insert("DSA_set_default_method",root,"DSA",128);
	insert("pkey_dsa_cleanup",root,"DSA",128);
	insert("pkey_dsa_ctrl_str",root,"DSA",128);
	insert("ossl_dsa_is_foreign",root,"DSA",128);
	insert("ossl_dsa_check_pairwise",root,"DSA",128);
	insert("DSA_meth_set0_app_data",root,"DSA",128);
	insert("DSA_meth_set_sign_setup",root,"DSA",128);
	insert("DSA_meth_set_verify",root,"DSA",128);
	insert("pkey_dsa_init",root,"DSA",128);
	insert("dsa_sign_setup",root,"DSA",128);
	insert("DSA_sign_setup",root,"DSA",128);
	insert("ossl_dsa_check_params",root,"DSA",128);
	insert("DSA_up_ref",root,"DSA",128);
	insert("DSA_set0_key",root,"DSA",128);
	insert("DSA_meth_set1_name",root,"DSA",128);
	insert("dsa_init",root,"DSA",128);
	insert("dsa_mod_inverse_fermat",root,"DSA",128);
	insert("ossl_dsa_ffc_params_fromdata",root,"DSA",128);
	insert("DSA_meth_new",root,"DSA",128);
	insert("pkey_dsa_verify",root,"DSA",128);
	insert("DSA_generate_key",root,"DSA",128);
	insert("ossl_dsa_get0_params",root,"DSA",128);
	insert("DSA_meth_get0_app_data",root,"DSA",128);
	insert("dsa_pub_encode",root,"DSA",128);
	insert("ossl_ffc_params_cmp",root,"DSA",128);
	insert("DSAparams_dup",root,"DSA",128);
	insert("DSA_generate_parameters",root,"DSA",128);
	insert("DSA_meth_dup",root,"DSA",128);
	insert("EVP_PKEY_CTX_set_dsa_paramgen_md",root,"DSA",128);
	insert("dsa_priv_decode",root,"DSA",128);
	insert("int_dsa_free",root,"DSA",128);
	insert("ossl_dsa_check_pub_key",root,"DSA",128);
	insert("ossl_dsa_check_priv_key",root,"DSA",128);
	insert("DSA_clear_flags",root,"DSA",128);
	insert("DSA_verify",root,"DSA",128);
	insert("i2d_DSAparams",root,"DSA",128);
	insert("DSA_test_flags",root,"DSA",128);
	insert("DSA_meth_get_flags",root,"DSA",128);
	insert("DSA_meth_set_init",root,"DSA",128);
	insert("dsa_sign_setup_no_digest",root,"DSA",128);
	insert("dsa_priv_encode",root,"DSA",128);
	insert("dsa_copy_parameters",root,"DSA",128);
	insert("twofish.h",root,"Twofish",64);
	insert("Twofish_fatal",root,"Twofish",64);
	insert("Twofish_Byte",root,"Twofish",64);
	insert("exp_Twofish_prepare_key",root,"Twofish",64);
	insert("Twofish_prepare_key",root,"Twofish",64);
	insert("twofish.h",root,"Twofish",64);
	insert("TDES_FLAGS_ENCRYPT",root,"TDES",128);
	insert("TDES_FLAGS_OPMODE_MASK",root,"TDES",128);
	insert("TDES_FLAGS_ECB",root,"TDES",128);
	insert("TDES_FLAGS_CBC",root,"TDES",128);
	insert("TDES_FLAGS_OFB",root,"TDES",128);
	insert("TDES_FLAGS_CFB64",root,"TDES",128);
	insert("TDES_FLAGS_CFB32",root,"TDES",128);
	insert("TDES_FLAGS_CFB16",root,"TDES",128);
	insert("TDES_FLAGS_CFB8",root,"TDES",128);
	insert("ESTREAM_SALSA20",root,"Salsa20",128);
	insert("wrap_salsa20_set_nonce",root,"Salsa20",128);
	insert("c_salsa20_crypt",root,"Salsa20",128);
	insert("crc32h.h",root,"CRC32",32);
	insert("crc32.c",root,"CRC32",32);
	insert("crc32_table",root,"CRC32",32);
	insert("xcrc32",root,"CRC32",32);
	insert("checkssha",root,"SSHA",128);
	insert("SSHA",root,"SSHA",128);
	insert("SSHA224PasswordEncoder",root,"SSHA",128);
	insert("SSHA224PasswordDecoder",root,"SSHA",128);
	insert("SSHA256PasswordEncoder",root,"SSHA",128);
	insert("SSHA256PasswordDecoder",root,"SSHA",128);
	insert("MCELIECE_H",root,"McEliece",64);
	insert("mceliece.h",root,"McEliece",64);
	insert("mceliece_init",root,"McEliece",64);
	insert("delete_mceliece",root,"McEliece",64);
	insert("mceliececipher.py",root,"McEliece",64);
	insert("ripemd160.h",root,"MD160",64);
	insert("ripemd160_Init",root,"MD160",64);
	insert("ripemd160_process",root,"MD160",64);
	insert("ripemd160_update",root,"MD160",64);
	insert("AQUAHASH_H",root,"FastHash",256);
	insert("desx",root,"DESX",64);
	insert("desx.go",root,"DESX",64);
	insert("desx.py",root,"DESX",64);
	insert("des_x",root,"DESX",64);
	insert("un_des_x",root,"DESX",64);
	insert("blumgoldwasser.py",root,"Blum-Goldwasser",320);
	insert("BlumGoldwasser",root,"Blum-Goldwasser",320);
	insert("sage.crypto.public_key.blum_goldwasser.BlumGoldwasser",root,"Blum-Goldwasser",320);
	insert("mascash2",root,"MSCash2",128);
	insert("javax.crypto.spec.DESedeKeySpec",root,"DESEde",168);
	insert("DESedeKeySpec",root,"DESEde",168);
	insert("DES_EDE_KEY_LEN",root,"DESEde",168);
	insert("des_setparity",root,"DES",64);
	insert("DESERR_NONE",root,"DES",64);
	insert("DES_encrypt3",root,"DES",64);
	insert("DES_ncbc_encrypt",root,"DES",64);
	insert("DES_set_odd_parity",root,"DES",64);
	insert("DES_cfb64_encrypt",root,"DES",64);
	insert("DES_ede3_ofb64_encrypt",root,"DES",64);
	insert("DES_decrypt3",root,"DES",64);
	insert("DES_ecb_encrypt",root,"DES",64);
	insert("DES_pcbc_encrypt",root,"DES",64);
	insert("DES_set_key",root,"DES",64);
	insert("DES_set_key_checked",root,"DES",64);
	insert("DES_ede3_cfb64_encrypt",root,"DES",64);
	insert("DES_random_key",root,"DES",64);
	insert("DES_ede3_cfb_encrypt",root,"DES",64);
	insert("DES_ecb3_encrypt",root,"DES",64);
	insert("DES_is_weak_key",root,"DES",64);
	insert("DES_set_key_unchecked",root,"DES",64);
	insert("DES_encrypt1",root,"DES",64);
	insert("DES_ede3_cbc_encrypt",root,"DES",64);
	insert("DES_ofb_encrypt",root,"DES",64);
	insert("DES_check_key_parity",root,"DES",64);
	insert("DES_key_sched",root,"DES",64);
	insert("DES_encrypt2",root,"DES",64);
	insert("DES_cfb_encrypt",root,"DES",64);
	insert("DES_crypt",root,"DES",64);
	insert("DES_quad_cksum",root,"DES",64);
	insert("DES_string_to_key",root,"DES",64);
	insert("DES_xcbc_encrypt",root,"DES",64);
	insert("DES_cbc_cksum",root,"DES",64);
	insert("DES_cbc_encrypt",root,"DES",64);
	insert("DES_ofb64_encrypt",root,"DES",64);
	insert("DES_string_to_2keys",root,"DES",64);
	insert("DES_fcrypt",root,"DES",64);
	insert("misty1_keyinit",root,"MISTY1",32);
	insert("misty1_encrypt_block",root,"MISTY1",32);
	insert("MISTY1_KEYSIZE",root,"MISTY1",32);
	insert("RC5.new",root,"RC5",128);
	insert("rc5.rb",root,"RC5",128);
	insert("RC5Enc",root,"RC5",128);
	insert("RC5Dec",root,"RC5",128);
	insert("RC5Enc.java",root,"RC5",128);
	insert("RC5Dec.java",root,"RC5",128);
	insert("RC5_32_decrypt",root,"RC5",128);
	insert("RC5_32_set_key",root,"RC5",128);
	insert("RC5_32_cfb64_encrypt",root,"RC5",128);
	insert("RC5_32_ofb64_encrypt",root,"RC5",128);
	insert("RC5_32_ecb_encrypt",root,"RC5",128);
	insert("RC5_32_cbc_encrypt",root,"RC5",128);
	insert("RC5_32_encrypt",root,"RC5",128);
	insert("Rijndael.h",root,"Rijndael",256);
	insert("Rijndael256",root,"Rijndael",256);
	insert("FastSkipJack",root,"Skipjack",32);
	insert("SkipJack",root,"Skipjack",32);
	insert("skipjackCipher",root,"Skipjack",32);
	insert("skipjack.go",root,"Skipjack",32);
	insert("lucifer.h",root,"Lucifer",128);
	insert("lucifer",root,"Lucifer",128);
	insert("serpent_subkey_t",root,"Serpent",128);
	insert("serpent_blk",root,"Serpent",128);
	insert("WAKE.h",root,"Wake",64);
	insert("WAKE_TestInstantiations",root,"Wake",64);
	insert("WAKE_Base",root,"Wake",64);
	insert("WAKE_Policy",root,"Wake",64);
	insert("WAKE_Output",root,"Wake",64);
	insert("MD6.py",root,"MD6",512);
	insert("md6_encrypt",root,"MD6",512);
	insert("CatMD6Crypto",root,"MD6",512);
	insert("md6Crypto.hash",root,"MD6",512);
	insert("sm4_encdec",root,"SMS4",128);
	insert("CRYPTOPP_SM4_H",root,"SMS4",128);
	insert("CRYPTOPP_SM4_ADVANCED_PROCESS_BLOCKS",root,"SMS4",128);
	insert("sms4.h",root,"SMS4",128);
	insert("SMS4CROL",root,"SMS4",128);
	insert("SMS4MASK3",root,"SMS4",128);
	insert("SMS4MASK2",root,"SMS4",128);
	insert("SMS4MASK1",root,"SMS4",128);
	insert("SMS4MASK0",root,"SMS4",128);
	insert("SOSEMANUK_H__",root,"Sosemanuk",128);
	insert("sosemanuk_key_context",root,"Sosemanuk",128);
	insert("sosemanuk_schedule",root,"Sosemanuk",128);
	insert("sosemanuk_init",root,"Sosemanuk",128);
	insert("sosemanuk_encrypt",root,"Sosemanuk",128);
	insert("SosemanukSlow",root,"Sosemanuk",128);
	insert("SosemanukFast",root,"Sosemanuk",128);
	insert("rc2_LTX__mcrypt_set_key",root,"RC2",128);
	insert("rc2_LTX__mcrypt_encrypt",root,"RC2",128);
	insert("rc2_LTX__mcrypt_decrypt",root,"RC2",128);
	insert("rc2_LTX__mcrypt_get_size",root,"RC2",128);
	insert("rc2_LTX__mcrypt_get_block_size",root,"RC2",128);
	insert("rc2_LTX__is_block_algorithm",root,"RC2",128);
	insert("rc2_LTX__mcrypt_get_key_size",root,"RC2",128);
	insert("RC2_encrypt",root,"RC2",128);
	insert("RC2_decrypt",root,"RC2",128);
	insert("RC2_ecb_encrypt",root,"RC2",128);
	insert("RC2_set_key",root,"RC2",128);
	insert("RC2_cfb64_encrypt",root,"RC2",128);
	insert("RC2_ofb64_encrypt",root,"RC2",128);
	insert("RC2_cbc_encrypt",root,"RC2",128);
	insert("skeincrypto.h",root,"Skein",256);
	insert("skein",root,"Skein",256);
	insert("sk_init",root,"Skein",256);
	insert("sk_encrypt",root,"Skein",256);
	insert("sk_decrypt",root,"Skein",256);
	insert("kFZA",root,"Fortezza",64);
	insert("aFZA",root,"Fortezza",64);
	insert("eFZA",root,"Fortezza",64);
	insert("LTC_SOBER128",root,"Sober",128);
	insert("sober128_start",root,"Sober",128);
	insert("sober128_add_entropy",root,"Sober",128);
	insert("sober128_ready",root,"Sober",128);
	insert("sober128_read",root,"Sober",128);
	insert("sober128_done",root,"Sober",128);
	insert("sober128_export",root,"Sober",128);
	insert("sober128_import",root,"Sober",128);
	insert("sober128_test",root,"Sober",128);
	insert("pyDes",root,"2DES",96);
	insert("javax.crypto.*",root,"2DES",96);
	insert("javax.crypto.spec.DESKeySpec",root,"2DES",96);
	insert("DES.h",root,"2DES",96);
	insert("MD2.py",root,"MD2",256);
	insert("mqv.h",root,"MQV",512);
	insert("hmqv.h",root,"MQV",512);
	insert("ECMQV",root,"MQV",512);
	insert("EQV_Domain",root,"MQV",512);
	insert("ECHMQV512",root,"MQV",512);
	insert("ECHMQV384",root,"MQV",512);
	insert("ECHMQV256",root,"MQV",512);
	insert("ECHMQV128",root,"MQV",512);
	insert("FHMQV",root,"MQV",512);
	insert("FHMQV512",root,"MQV",512);
	insert("FHMQV384",root,"MQV",512);
	insert("FHMQV256",root,"MQV",512);
	insert("FHMQV128",root,"MQV",512);
	insert("Shacal",root,"SHACAL",128);
	insert("isShacal1",root,"SHACAL",128);
	insert("CRYPTOPP_SHACAL2_H",root,"SHACAL",128);
	insert("SHACAL2Encryption",root,"SHACAL",128);
	insert("SHACAL2",root,"SHACAL",128);
	insert("lmhashConstant",root,"Feal",64);
	insert("unKnownLMHashes",root,"Feal",64);
	insert("createLMHash",root,"Feal",64);
	insert("pyCast6",root,"CAST6",320);
	insert("org.xeustechnologies.crypto.kpbe",root,"PBE",128);
	insert("PBE",root,"PBE",128);
	insert("KPBE",root,"PBE",128);
	insert("pbkdf1.js",root,"pbkdf1",128);
	insert("egoroof-blowfish",root,"Blowfish",320);
	insert("/dist/blowfish",root,"Blowfish",320);
	insert("RIPEMD160_CTX",root,"RIPEMD",128);
	insert("ripemd160_Init",root,"RIPEMD",128);
	insert("ripemd160_process",root,"RIPEMD",128);
	insert("ripemd160_Update",root,"RIPEMD",128);
	insert("RIPEMD160_Init",root,"RIPEMD",128);
	insert("ripemd160_block_data_order",root,"RIPEMD",128);
	insert("ripemd160_block_x86",root,"RIPEMD",128);
	insert("ripemd160_block",root,"RIPEMD",128);
	insert("tomcrypt.h",root,"Anubis",128);
	insert("ECMQV",root,"ECMQV",128);
	insert("IEEEP1363",root,"ECMQV",128);
	insert("CRYPTOPP_XTR_H",root,"XTR",64);
	insert("XTR_FindPrimesAndGenerator",root,"XTR",64);
	insert("XTR_Exponentiate",root,"XTR",64);
	insert("fcrypt.encrypt",root,"FCrypt",128);
	insert("fcrypt.decrypt",root,"FCrypt",128);
	insert("fcrypt_ctx",root,"FCrypt",128);
	insert("fcrypt_mod_init",root,"FCrypt",128);
	insert("F_ENCRYPT",root,"FCrypt",128);
	insert("nimbusds.jose",root,"Nimbus",256);
	insert("JOSEObjectType",root,"Nimbus",256);
	insert("CAST3.h",root,"CAST3",320);
	insert("Cobra_algorithm",root,"Cobra",128);
	insert("cobra.java",root,"Cobra",128);
	insert("blake2",root,"Blake2",256);
	insert("pycabcrypt.h",root,"Blake2",256);
	insert("BCrypt.java",root,"Blake2",256);
	insert("jBCrypt",root,"Blake2",256);
	insert("Rabbit_Util",root,"Rabbit",128);
	insert("Rabbit_ctx",root,"Rabbit",128);
	insert("Rabbit_state",root,"Rabbit",128);
	insert("Rabbit_Cipher.py",root,"Rabbit",128);
	insert("Fnv1a1024",root,"FNV1",1024);
	insert("Fnv1a256",root,"FNV1",1024);
	insert("Fnv1a512",root,"FNV1",1024);
	insert("Fnv1aBigBase",root,"FNV1",1024);
	insert("pbkdf2.js",root,"pbkdf2",128);
	insert("Ikonoshirt_Pbkdf2_Model_Encryption",root,"pbkdf2",128);
	insert("_pbkdf2",root,"pbkdf2",128);
	insert("tea_encrypt",root,"TEA",128);
	insert("tea_decrypt",root,"TEA",128);
	insert("tea_cbc_mode",root,"TEA",128);
	insert("tea_ofb_mode",root,"TEA",128);
	insert("Crypto.Threefish.Common",root,"Threefish",1024);
	insert("newThreefish256",root,"Threefish",1024);
	insert("newThreefish512",root,"Threefish",1024);
	insert("newThreefish1024",root,"Threefish",1024);
	insert("threefish_mod_fini",root,"Threefish",1024);
	insert("threefish_algs",root,"Threefish",1024);
	insert("threefish_round",root,"Threefish",1024);
	insert("threefish_roundinv",root,"Threefish",1024);
	insert("threefish_encrypt_generic",root,"Threefish",1024);
	insert("snow5_aes_round",root,"SNOW",128);
	insert("snow-3g.h",root,"SNOW",128);
	insert("RTE_CRYPTO_CIPHER_SNOW3G_UEA2",root,"SNOW",128);
	insert("RTE_CRYPTO_AUTH_SNOW3G_UIA2",root,"SNOW",128);
	insert("botan-3.dll",root,"3DES",128);
	insert("botan.dll",root,"3DES",128);
	insert("libbotan-3.dylib",root,"3DES",128);
	insert("libbotan-2.dylib",root,"3DES",128);
	insert("libbotan-3.so",root,"3DES",128);
	insert("libbotan-2.so",root,"3DES",128);
	insert("libbotan-2.s",root,"3DES",128);
	insert("fortuna",root,"Fortuna",64);
	insert("crypto/fortuna",root,"Fortuna",64);
	insert("salsa10",root,"SALSA10",64);
	insert("salsa10-src.bin",root,"SALSA10",64);
	insert("salsa10-nonce.bin",root,"SALSA10",64);
	insert("TnepresEngine",root,"TNEPRES",256);
	insert("Cipher.Tnepres",root,"TNEPRES",256);
	insert("KeyGenerator.Tnepres",root,"TNEPRES",256);
	insert("AlgorithmParameters.Tnepres",root,"TNEPRES",256);
	insert("startCMEA",root,"CMEA",64);
	insert("CmeaSys",root,"CMEA",64);
	insert("LIBLTE_SECURITY_CIPHERING_ALGORITHM_ID_128_EEA1",root,"128-EEA1",128);
	insert("128-EEA1",root,"128-EEA1",128);
	insert("SRSLTE_LIBLTE_SECURITY_H",root,"128-EEA1",128);
	insert("hc256_generate",root,"HC256",256);
	insert("hc256_setkey",root,"HC256",256);
	insert("hc256_crypt",root,"HC256",256);
	insert("CRYPTOPP_HC256_H",root,"HC256",256);
	insert("SrtpCipherF8",root,"F8",128);
	insert("F8Context",root,"F8",128);
	insert("processPacketAesF8",root,"F8",128);
	insert("Juniper",root,"Juniper",128);
	insert("mod_Juniper_Decrypt",root,"Juniper",128);
	insert("juniper_decrypt",root,"Juniper",128);
	insert("baton.h",root,"Baton",320);
	insert("md5_file",root,"MD5",128);
	insert("md5",root,"MD5",128);
	insert("md5crypt",root,"MD5",128);
	insert("aprcrypt",root,"MD5",128);
	insert("md5_encrypt",root,"MD5",128);
	insert("md5_block_data_order",root,"MD5",128);
	insert("ossl_md5_sha1_init",root,"MD5",128);
	insert("ossl_md5_sha1_ctrl",root,"MD5",128);
	insert("MD5_Init",root,"MD5",128);
	insert("ossl_md5_sha1_update",root,"MD5",128);
	insert("ossl_md5_sha1_final",root,"MD5",128);
	insert("gost_28147_89",root,"GOST",64);
	insert("gost.hpp",root,"GOST",64);
	insert("GOST28147_COMPRESSED_SBOX",root,"GOST",64);
	insert("GOST28147EncryptCycle",root,"GOST",64);
	insert("GOST28147EncryptBlock",root,"GOST",64);
	insert("GOST28147SBoxTransformation",root,"GOST",64);
	insert("RC4_H",root,"RC4",2048);
	insert("RC4_KEY_S",root,"RC4",2048);
	insert("RC4_key",root,"RC4",2048);
	insert("RC4",root,"RC4",2048);
	insert("RC4_set_key",root,"RC4",2048);
	insert("RSACRYPT_H",root,"RSA",128);
	insert("RSAcrypt",root,"RSA",128);
	insert("RSAdecrypt",root,"RSA",128);
	insert("JSEncryptRSAKey",root,"RSA",128);
	insert("ossl_rsa_acvp_test_free",root,"RSA",128);
	insert("RSA_size",root,"RSA",128);
	insert("rsa_priv_print",root,"RSA",128);
	insert("ossl_rsa_acvp_test_gen_params_new",root,"RSA",128);
	insert("ossl_rsa_acvp_test_gen_params_free",root,"RSA",128);
	insert("RSA_verify_PKCS1_PSS",root,"RSA",128);
	insert("RSA_get0_crt_params",root,"RSA",128);
	insert("RSA_meth_set_keygen",root,"RSA",128);
	insert("RSA_meth_free",root,"RSA",128);
	insert("RSA_padding_check_none",root,"RSA",128);
	insert("RSA_meth_set_pub_enc",root,"RSA",128);
	insert("pkey_rsa_ctrl_str",root,"RSA",128);
	insert("ossl_rsa_check_pminusq_diff",root,"RSA",128);
	insert("ossl_rsa_pss_get_param_unverified",root,"RSA",128);
	insert("rsa_pkey_dirty_cnt",root,"RSA",128);
	insert("rsa_int_import_from",root,"RSA",128);
	insert("rsa_pkey_import_from",root,"RSA",128);
	insert("ossl_rsa_dup",root,"RSA",128);
	insert("rsa_new_intern",root,"RSA",128);
	insert("RSA_set_method",root,"RSA",128);
	insert("RSA_sign_ASN1_OCTET_STRIN",root,"RSA",128);
	insert("rsa_validate_rng_strength",root,"RSA",128);
	insert("rsa_validate_keypair_multiprime",root,"RSA",128);
	insert("RSA_meth_new",root,"RSA",128);
	insert("RSA_verify_ASN1_OCTET_STRING",root,"RSA",128);
	insert("RSA_X931_generate_key_ex",root,"RSA",128);
	insert("RSA_generate_multi_prime_key",root,"RSA",128);
	insert("RSA_get_ex_data",root,"RSA",128);
	insert("RSA_padding_add_PKCS1_type_2",root,"RSA",128);
	insert("rsa_pub_encode",root,"RSA",128);
	insert("rsa_item_sign",root,"RSA",128);
	insert("EVP_PKEY_CTX_set_rsa_keygen_primes",root,"RSA",128);
	insert("RSA_meth_set_flags",root,"RSA",128);
	insert("RSA_meth_set_pub_dec",root,"RSA",128);
	insert("RSA_padding_add_PKCS1_OAEP",root,"RSA",128);
	insert("LL_GEA4",root,"GEA4-5",128);
	insert("LL_GEA5",root,"GEA4-5",128);
	insert("LL_GEA6",root,"GEA4-5",128);
	insert("hf_nas_eps_emm_gea5",root,"GEA4-5",128);
	insert("hf_nas_eps_emm_gea6",root,"GEA4-5",128);
	insert("hf_nas_eps_emm_gea4",root,"GEA4-5",128);
	insert("CAST_ecb_encrypt",root,"CAST",320);
	insert("CAST_encrypt",root,"CAST",320);
	insert("CAST_decrypt",root,"CAST",320);
	insert("CAST_cbc_encrypt",root,"CAST",320);
	insert("CAST_ofb64_encrypt",root,"CAST",320);
	insert("CAST_set_key",root,"CAST",320);
	insert("isaacCSPRNG",root,"ISAAC",256);
	insert("isaacRandomPool.h",root,"ISAAC",256);
	insert("ZUC_H",root,"ZUC",128);
	insert("__ZUC_H__",root,"ZUC",128);
	insert("zuc.asm",root,"ZUC",128);
	insert("_zuc_init",root,"ZUC",128);
	insert("_zuc_generate_keystream",root,"ZUC",128);
	insert("voipshark",root,"Shark",64);
	insert("shark.h",root,"Shark",64);
	insert("SHARKTransform",root,"Shark",64);
	insert("CRYPTOPP_SHARK_H",root,"Shark",64);
	insert("xtea_setkey",root,"XTEA",128);
	insert("xtea.h",root,"XTEA",128);
	insert("xtea_encodeecb",root,"XTEA",128);
	insert("xtea_decodecbc",root,"XTEA",128);
	insert("xtea_declen",root,"XTEA",128);
	insert("aria.cpp",root,"Aria",256);
	insert("aria.h",root,"Aria",256);
	insert("r.re.nsri.aria",root,"Aria",256);
	insert("ARIAEngine",root,"Aria",256);
	insert("bcrypt",root,"Bcrypt",320);
	insert("pycabcrypt.h",root,"Bcrypt",320);
	insert("BCrypt.java",root,"Bcrypt",320);
	insert("jBCrypt",root,"Bcrypt",320);
	insert("MDC2.h",root,"MDC2",128);
	insert("mdc2",root,"MDC2",128);
	insert("mdc2_with_aes.py",root,"MDC2",128);
	insert("MDC2_Init",root,"MDC2",128);
	insert("MDC2_Update",root,"MDC2",128);
	insert("MDC2_Final",root,"MDC2",128);
	insert("mdc2_body",root,"MDC2",128);
	insert("encryptRSAWithOAEP",root,"RSA-OAEP",128);
	insert("decryptRSAWithOAEP",root,"RSA-OAEP",128);
	insert("RSA_OAEP_H",root,"RSA-OAEP",128);
	insert("RSA_OAEP",root,"RSA-OAEP",128);
	insert("getPBES2EncryptionObject",root,"PBES2",256);
	insert("id-PBES2",root,"PBES2",256);
	insert("PBES2HS256A128KW",root,"PBES2",256);
	insert("PBES2AESKW",root,"PBES2",256);
	insert("PBES2-HS256+A128K",root,"PBES2",256);
	insert("NTRU_NTRU_H",root,"NTRUEncrypt",128);
	insert("ntru.h",root,"NTRUEncrypt",128);
	insert("ntruprime_gen_key_pair",root,"NTRUEncrypt",128);
	insert("ntru_gen_key_pair_multi",root,"NTRUEncrypt",128);
	insert("ntru_gen_pub",root,"NTRUEncrypt",128);
	insert("ntru_encrypt",root,"NTRUEncrypt",128);
	insert("ntru_decrypt",root,"NTRUEncrypt",128);
	insert("net.sf.ntru.util",root,"NTRUEncrypt",128);
	insert("ecdh_generate_keys",root,"ECDH",128);
	insert("ecdh_shared_secret",root,"ECDH",128);
	insert("ECC_PRV_KEY_SIZE",root,"ECDH",128);
	insert("tiger_compress_macro",root,"Tiger",256);
	insert("tiger_compress",root,"Tiger",256);
	insert("ausTigerTokens1",root,"Tiger",256);
	insert("USE_VIA_ACE_IF_PRESENT",root,"ACE",64);
	insert("camellia.core",root,"Camellia",256);
	insert("CIPHERCAMELLIA256",root,"Camellia",256);
	insert("CAMELLIA-256-CBC",root,"Camellia",256);
	insert("camellia",root,"Camellia",256);
	insert("Camellia_cfb8_encrypt",root,"Camellia",256);
	insert("Camellia_ctr128_encrypt",root,"Camellia",256);
	insert("Camellia_set_key",root,"Camellia",256);
	insert("Camellia_EncryptBlock_Rounds",root,"Camellia",256);
	insert("Camellia_DecryptBlock",root,"Camellia",256);
	insert("Camellia_decrypt",root,"Camellia",256);
	insert("Camellia_DecryptBlock_Rounds",root,"Camellia",256);
	insert("Camellia_cfb128_encrypt",root,"Camellia",256);
	insert("Camellia_Ekeygen",root,"Camellia",256);
	insert("Camellia_EncryptBlock",root,"Camellia",256);
	insert("Camellia_cbc_encrypt",root,"Camellia",256);
	insert("Camellia_cfb1_encrypt",root,"Camellia",256);
	insert("Camellia_ecb_encrypt",root,"Camellia",256);
	insert("Camellia_encrypt",root,"Camellia",256);
	insert("Camellia_ofb128_encrypt",root,"Camellia",256);
	insert("PKCS7_digest_from_attributes",root,"PKCS7",128);
	insert("PKCS7_set_content",root,"PKCS7",128);
	insert("ossl_x509_add_cert_new",root,"PKCS7",128);
	insert("PKCS7_add_attrib_smimecap",root,"PKCS7",128);
	insert("PKCS7_type_is_other",root,"PKCS7",128);
	insert("PKCS7_find_digest",root,"PKCS7",128);
	insert("pkcs7_ecdsa_or_dsa_sign_verify_setup",root,"PKCS7",128);
	insert("pkcs7_rsa_sign_verify_setup",root,"PKCS7",128);
	insert("PKCS7_RECIP_INFO_set",root,"PKCS7",128);
	insert("i2d_PKCS7_bio_stream",root,"PKCS7",128);
	insert("PKCS7_final",root,"PKCS7",128);
	insert("ASN1_INTEGER_cmp",root,"PKCS7",128);
	insert("PKCS7_dataDecode",root,"PKCS7",128);
	insert("PKCS7_encrypt_ex",root,"PKCS7",128);
	insert("ossl_err_load_PKCS7_strings",root,"PKCS7",128);
	insert("PKCS7_RECIP_INFO_get0_alg",root,"PKCS7",128);
	insert("PKCS7_sign_add_signer",root,"PKCS7",128);
	insert("PKCS7_verify",root,"PKCS7",128);
	insert("pkcs7_cmp_ri",root,"PKCS7",128);
	insert("PKCS7_SIGNER_INFO_sign",root,"PKCS7",128);
	insert("PKCS7_set_type",root,"PKCS7",128);
	insert("PKCS7_add_recipient",root,"PKCS7",128);
	insert("PKCS7_encrypt",root,"PKCS7",128);
	insert("PKCS7_dataInit",root,"PKCS7",128);
	insert("PKCS7_set_attributes",root,"PKCS7",128);
	insert("PKCS7_SIGNER_INFO_set",root,"PKCS7",128);
	insert("pkcs7_bio_add_digest",root,"PKCS7",128);
	insert("PKCS7_add_signed_attribute",root,"PKCS7",128);
	insert("PKCS7_add_crl",root,"PKCS7",128);
	insert("PKCS7_add_signer",root,"PKCS7",128);
	insert("PKCS7_add_signature",root,"PKCS7",128);
	insert("ossl_pkcs7_ctx_propagate",root,"PKCS7",128);
	insert("PKCS7_stream",root,"PKCS7",128);
	insert("PKCS7_decrypt",root,"PKCS7",128);
	insert("PKCS7_get_octet_string",root,"PKCS7",128);
	insert("PKCS7_get_attribute",root,"PKCS7",128);
	insert("PKCS7_content_new",root,"PKCS7",128);
	insert("ossl_pkcs7_set0_libctx",root,"PKCS7",128);
	insert("ossl_pkcs7_ctx_get0_libctx",root,"PKCS7",128);
	insert("PKCS7_SIGNER_INFO_get0_algs",root,"PKCS7",128);
	insert("PKCS7_sign",root,"PKCS7",128);
	insert("PKCS7_new",root,"PKCS7",128);
	insert("pkcs7_decrypt_rinfo",root,"PKCS7",128);
	insert("PKCS7_dataFinal",root,"PKCS7",128);
	insert("ossl_pkcs7_resolve_libctx",root,"PKCS7",128);
	insert("PEM_write_bio_PKCS7_stream",root,"PKCS7",128);
	insert("PKCS7_ctrl",root,"PKCS7",128);
	insert("PKCS7_add_certificate",root,"PKCS7",128);
	insert("SMIME_write_PKCS7",root,"PKCS7",128);
	insert("SMIME_write_ASN1_ex",root,"PKCS7",128);
	insert("PKCS7_add1_attrib_digest",root,"PKCS7",128);
	insert("PKCS7_get_issuer_and_serial",root,"PKCS7",128);
	insert("PKCS7_get_signed_attribute",root,"PKCS7",128);
	insert("PKCS7_sign_ex",root,"PKCS7",128);
	insert("yarrow_start",root,"Yarrow",160);
	insert("yarrow_desc",root,"Yarrow",160);
	insert("yarrow_start",root,"Yarrow",160);
	insert("yarrow_add_entropy",root,"Yarrow",160);
	insert("yarrow_ready",root,"Yarrow",160);
	insert("yarrow_read",root,"Yarrow",160);
	insert("yarrow_done",root,"Yarrow",160);
	insert("yarrow_export",root,"Yarrow",160);
	insert("yarrow_import",root,"Yarrow",160);
	insert("yarrow_test",root,"Yarrow",160);
	insert("LTC_YARROW",root,"Yarrow",160);
	insert("LTC_YARROW_AES",root,"Yarrow",160);
	insert("LTC_YARROW_AES1",root,"Yarrow",160);
	insert("LTC_YARROW_AES2",root,"Yarrow",160);
	insert("LTC_YARROW_AES3",root,"Yarrow",160);
	insert("LTC_YARROW_AES4",root,"Yarrow",160);
	insert("LTC_YARROW_AES5",root,"Yarrow",160);
	insert("RC4-HMAC-MD5",root,"RC4-HMAC",2048);
	insert("RC4HMAC",root,"RC4-HMAC",2048);
	insert("RC4-HMAC.go",root,"RC4-HMAC",2048);
	insert("TLS_RSA_WITH_CHACHA20_SHA",root,"ChaCha(Salsa)",256);
	insert("TLS_ECDHE_RSA_WITH_CHACHA20_SHA",root,"ChaCha(Salsa)",256);
	insert("TLS_ECDHE_ECDSA_WITH_CHACHA20_SHA",root,"ChaCha(Salsa)",256);
	insert("TLS_RSA_WITH_CHACHA20_POLY1305",root,"ChaCha(Salsa)",256);
	insert("TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305",root,"ChaCha(Salsa)",256);
	insert("TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305",root,"ChaCha(Salsa)",256);
	insert("TLS_DHE_RSA_WITH_CHACHA20_POLY1305",root,"ChaCha(Salsa)",256);
	insert("TLS_DHE_PSK_WITH_CHACHA20_POLY1305",root,"ChaCha(Salsa)",256);
	insert("TLS_PSK_WITH_CHACHA20_POLY1305",root,"ChaCha(Salsa)",256);
	insert("TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305",root,"ChaCha(Salsa)",256);
	insert("TLS_RSA_PSK_WITH_CHACHA20_POLY1305",root,"ChaCha(Salsa)",256);
	insert("chacha20_core",root,"ChaCha(Salsa)",256);
	insert("ChaCha20_ctr32",root,"ChaCha(Salsa)",256);
	insert("ChaCha20_ctr32_int",root,"ChaCha(Salsa)",256);
	insert("ChaCha20_ctr32_vmx",root,"ChaCha(Salsa)",256);
	insert("ChaCha20_ctr32_vsx",root,"ChaCha(Salsa)",256);
	insert("ChaCha20_ctr32_vsx_p10",root,"ChaCha(Salsa)",256);
	insert("fletcher64",root,"Fletcher",64);
	insert("fletcher32",root,"Fletcher",64);
	insert("fletcher16",root,"Fletcher",64);
	insert("FEAL_key_schedule",root,"Feal",64);
	insert("FEAL_Encrypt",root,"Feal",64);
	insert("FEAL_Decrypt",root,"Feal",64);
	insert("feal8.h",root,"Feal",64);
	insert("CRYPTOPP_LUC_H",root,"LUC",64);
	insert("LUCFunction",root,"LUC",64);
	insert("luc.h",root,"LUC",64);
	insert("grain.h",root,"GrainV1",64);
	insert("MD2.py",root,"MD2",256);
	insert("md2_block",root,"MD2",256);
	insert("MD2_Init",root,"MD2",256);
	insert("MD2_Update",root,"MD2",256);
	insert("MD2_Final",root,"MD2",256);
	insert("SEALContext",root,"Seal",128);
	insert("seal.h",root,"Seal",128);
	insert("SEALWrapper",root,"Seal",128);
	insert("toSealObject",root,"Seal",128);
	insert("fromSealObject",root,"Seal",128);
	insert("loki.h",root,"LOKI91",64);
	insert("loki.i",root,"LOKI91",64);
	insert("loki_lib_ver",root,"LOKI91",64);
	insert("setlokikey",root,"LOKI91",64);
	insert("setlokikey",root,"LOKI91",64);
	insert("mscash.x.gz",root,"MSCash",256);
	insert("mscash",root,"MSCash",256);
	insert("__KASUMI_H__",root,"Kazumi",64);
	insert("kasumi.h",root,"Kazumi",64);
	insert("kasumi_desc",root,"Kazumi",64);
	insert("RSAES-PKCS1-V1_5-ENCRYPT",root,"RSAES-PKCS1-V1_5",128);
	insert("RSAES-PKCS1-V1_5",root,"RSAES-PKCS1-V1_5",128);
}
#endif
